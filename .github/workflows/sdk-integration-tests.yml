name: SDK integration tests

on:
  push:
    branches:
      - DEV-354-sdk-pipeline
  workflow_dispatch:

env:
  BACKEND_REPO: cord-team/cord-backend
  SDK_PROJECT: sdk-integration-tests
  SDK_TEST_REPORT: sdk-test-report.xml
  CLIENT_REPO: https://github.com/cord-team/cord-client-python.git

concurrency:
  group: cord-client-${{ github.ref }}
  cancel-in-progress: true

jobs:
#  instigate-sdk-tests:
#    name: Trigger SDK tests in backend repo
#    runs-on: ubuntu-latest
#    steps:
#      - name: Dispatch event
#        uses: peter-evans/repository-dispatch@v1
#        with:
#          repository: ${{ env.BACKEND_REPO }}
#          token: ${{ secrets.ACCESS_TOKEN }}
#          event-type: ${{ env.EVENT_KEY }}
#          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
  run-sdk-tests:
    name: Run SDK tests in backend repo
    runs-on: ubuntu-latest
    env:
      ENVIRONMENT: DEV
      SDK_PRIVATE_KEY: ${{ secrets.SDK_TESTS_PRIVATE_KEY }}
      TEST_DIR: ./src/cord/sdk_integration_tests/tests
    steps:
      - name: Checkout backend repo
        uses: actions/checkout@v2
        with:
          repository: ${{ env.BACKEND_REPO }}
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Setup Poetry environment
        uses: ./.github/actions/setup-poetry-environment
        with:
          project: ${{ env.SDK_PROJECT }}
          cache-key: sdk-${{ hashFiles('projects/sdk-integration-tests/poetry.lock') }}

      - name: Setup FFMPEG
        uses: FedericoCarboni/setup-ffmpeg@v1

      - name: Get SDK
        run: |
          cd projects/${{ env.SDK_PROJECT }}
          python -m pip install --upgrade pip
          GIT_REPO=${{ github.repositoryUrl }}
          HTTPS="${GIT_REPO/"git:"/"https:"}"
          echo $HTTPS
          poetry add git+${{ env.CLIENT_REPO }}
          poetry install

      - name: Run tests
        run: |
          cd projects/${{ env.SDK_PROJECT }}
          source .venv/bin/activate
          export CORD_ENV=${{ env.ENVIRONMENT }}
          export PRIVATE_KEY="${{ env.SDK_PRIVATE_KEY }}"
          python -m pytest ${{ env.TEST_DIR }} --rootdir=${{ env.TEST_DIR }} --verbose --junitxml=${{ env.SDK_TEST_REPORT }}

#      - name: Upload report
#        uses: actions/upload-artifact@v2
#        if: always()
#        with:
#          name: ${{ env.SDK_TEST_REPORT }}
#          path: projects/${{ env.SDK_PROJECT }}/${{ env.SDK_TEST_REPORT }}

#  publish-test-reports:
#    name: Publish test reports
#    runs-on: ubuntu-latest
#    needs: [ api-server-tests, sdk-tests ]
#    if: success() || failure()
#
#    steps:
#      - name: Download API server test report
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ env.API_TEST_REPORT }}
#          path: ${{ env.API_TEST_REPORT }}
#
#      - name: Download SDK integration test report
#        uses: actions/download-artifact@v2
#        with:
#          name: ${{ env.SDK_TEST_REPORT }}
#          path: ${{ env.SDK_TEST_REPORT }}
#
#      - name: Publish API server test report
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        with:
#          files: ${{ env.API_TEST_REPORT }}/*.xml
#          check_name: API server test report
#
#      - name: Publish SDK integration test report
#        uses: EnricoMi/publish-unit-test-result-action@v1
#        with:
#          files: ${{ env.SDK_TEST_REPORT }}/*.xml
#          check_name: SDK integration test report