name: Test SDK

on:
  push:
    branches:
      - DEV-354-sdk-pipeline
  workflow_dispatch:

env:
  PYTHON: 3.7.12
  POETRY: 1.1.12
  UNIT_TEST_REPORT: unit-test-report.xml
  SDK_TEST_REPORT: sdk-test-report.xml

concurrency:
  group: cord-client-${{ github.ref }}-test
  cancel-in-progress: true

jobs:
  unit-tests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON }}

      - uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY }}
          virtualenvs-in-project: true

      - name: Check cache
        id: cached-poetry
        uses: actions/cache@v2
        with:
          path: .venv
          key: unit-${{ hashFiles('poetry.lock') }}-${{ env.PYTHON }}

      - name: Install dependencies
        if: steps.cached-poetry.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Run tests
        run: |
          source .venv/bin/activate
          python -m pytest tests --verbose --junitxml=${{ env.UNIT_TEST_REPORT }}

      - name: Upload report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ${{ env.UNIT_TEST_REPORT }}
          path: ${{ env.UNIT_TEST_REPORT }}

  sdk-tests:
    name: Run SDK tests
    runs-on: ubuntu-latest
    env:
      BACKEND_REPO: cord-team/cord-backend
      PROJECT: sdk-integration-tests
      PRIVATE_KEY: ${{ secrets.SDK_TESTS_PRIVATE_KEY }}
      TEST_DIR: ./src/cord/sdk_integration_tests/tests
      ENVIRONMENT: DEV
    steps:
      - name: Checkout backend repo
        uses: actions/checkout@v2
        with:
          repository: ${{ env.BACKEND_REPO }}
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Setup Poetry environment
        uses: ./.github/actions/setup-poetry-environment
        with:
          project: ${{ env.PROJECT }}
          cache-key: sdk-${{ hashFiles('projects/sdk-integration-tests/poetry.lock') }}

      - name: Setup FFMPEG
        uses: FedericoCarboni/setup-ffmpeg@v1

      - name: Get SDK
        run: |
          cd projects/${{ env.PROJECT }}
          python -m pip install --upgrade pip
          GIT_REPO=${{ github.repositoryUrl }}
          poetry add git+"${GIT_REPO/"git:"/"https:"}"
          poetry install

      - name: Run tests
        run: |
          cd projects/${{ env.PROJECT }}
          source .venv/bin/activate
          export CORD_ENV=${{ env.ENVIRONMENT }}
          export PRIVATE_KEY="${{ env.PRIVATE_KEY }}"
          python -m pytest ${{ env.TEST_DIR }} --rootdir=${{ env.TEST_DIR }} --verbose --junitxml=${{ env.SDK_TEST_REPORT }}

      - name: Upload report
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: ${{ env.SDK_TEST_REPORT }}
          path: projects/${{ env.PROJECT }}/${{ env.SDK_TEST_REPORT }}

  publish-test-reports:
      name: Publish test reports
      runs-on: ubuntu-latest
      needs: [unit-tests, sdk-tests]
      if: success() || failure()

      steps:
        - name: Download unit test report
          uses: actions/download-artifact@v2
          with:
            name: ${{ env.UNIT_TEST_REPORT }}
            path: ${{ env.UNIT_TEST_REPORT }}

        - name: Download SDK integration test report
          uses: actions/download-artifact@v2
          with:
            name: ${{ env.SDK_TEST_REPORT }}
            path: ${{ env.SDK_TEST_REPORT }}

        - name: Publish unit test report
          uses: EnricoMi/publish-unit-test-result-action@v1
          with:
            files: ${{ env.UNIT_TEST_REPORT }}/*.xml
            check_name: Unit test report

        - name: Publish SDK integration test report
          uses: EnricoMi/publish-unit-test-result-action@v1
          with:
            files: ${{ env.SDK_TEST_REPORT }}/*.xml
            check_name: SDK integration test report